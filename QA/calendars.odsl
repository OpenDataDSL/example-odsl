print "**************************************************************"
print "*********************** Calendar Test ************************"
print "**************************************************************"

eng = ${calendar:"#ENG"}

assertTrue(eng, "Calendar shouldn't be null")
assertTrue(eng.name, "Calendar name shouldn't be null")

start = Date("2020-05-20")
enddate = Date("2020-05-26")

dates = eng.getDates(start, enddate)
assertEquals(4, dates.size())
assertEquals([Date("2020-05-20"),Date("2020-05-21"),Date("2020-05-22"),Date("2020-05-26")], dates)

dates = eng.getDates(start, 3)
assertEquals(4, dates.size())
assertEquals([Date("2020-05-20"),Date("2020-05-21"),Date("2020-05-22"),Date("2020-05-26")], dates)

assertTrue(eng.includes(Date("2020-05-22")))
assertFalse(eng.includes(Date("2020-05-25")))

assertEquals(Date("2020-05-21"), eng.next(start))
assertEquals(Date("2020-05-19"), eng.previous(start))

hcal = HolidayCalendar()
hcal.id = "HENG"
hcal.addRule("every Saturday")
hcal.addRule("every Sunday")
hcal.addRule("1st of January named 'New Years Day' on saturday shift 2 days and on sunday shift 1 day")
hcal.addRule("Good Friday")
hcal.addRule("Easter Monday")
hcal.addRule("first monday in may named 'Early May' to 2019")
hcal.addRule("8th of may named 'VE Day' from 2020 to 2020")
hcal.addRule("first monday in may named 'Early May' from 2021")
hcal.addRule("last monday in may named 'Spring Bank Holiday'")
hcal.addRule("last monday in august named 'Summer Bank Holiday'")
hcal.addRule("25th of december named 'Christmas Day' on saturday shift 3 days and on sunday shift 2 days")
hcal.addRule("26th of december named 'Boxing Day' on saturday shift 2 days and on sunday shift 1 day")
print hcal

assertFalse(hcal.includes(Date("2020-01-01")))
assertFalse(hcal.includes(Date("2020-04-10")))
assertFalse(hcal.includes(Date("2020-04-13")))
assertFalse(hcal.includes(Date("2020-05-08")))
assertFalse(hcal.includes(Date("2020-05-25")))
assertFalse(hcal.includes(Date("2020-08-31")))
assertFalse(hcal.includes(Date("2020-12-25")))
assertFalse(hcal.includes(Date("2020-12-28")))
assertFalse(hcal.includes(Date("2021-01-01")))
assertFalse(hcal.includes(Date("2021-04-02")))
assertFalse(hcal.includes(Date("2021-04-05")))
assertFalse(hcal.includes(Date("2021-05-03")))

// Intraday
hourly = IntradayCalendar(1h)
hs = Date("2020-05-20T03:00:00")
he = Date("2020-05-20T08:00:00")
indexes = hourly.getDates(hs, he)
assertEquals(6, indexes.size())

hh = IntradayCalendar(30m)
hs = Date("2020-05-20T03:00:00")
he = Date("2020-05-20T08:00:00")
indexes = hh.getDates(hs, he)
assertEquals(11, indexes.size())

// Hourly Peak calendar
peak = IntradayCalendar(1h, eng, [0,1,2,3,4,5,6,20,21,22,23])
print peak
hs = Date("2020-05-20T00:00:00")
he = Date("2020-05-20T23:00:00")
indexes = peak.getDates(hs, he)
assertEquals(13, indexes.size())

// Test peak hours over bank holiday weekend
hs = Date("2020-05-22T00:00:00")
he = Date("2020-05-26T23:00:00")
indexes = peak.getDates(hs, he)
assertEquals(26, indexes.size())

// Test Expiry Calendars
expiry = ExpiryCalendar(hcal)
expiry.addRule("go back 1 day using calendar")
expiry.addRule("go back 3 days using calendar for quarters")
ondate = CurveDate(Date("2020-05-10"), expiry)
expiry = ondate.getExpiry("2020M06")
assertEquals(Date("2020-05-29"), expiry)
expiry = ondate.getExpiry("2020Q03")
assertEquals(Date("2020-06-26"), expiry)

// Test saving calendars
save ${calendar:hcal}
calcount = find ${calendar:""}
assertEquals(1, calcount.size)