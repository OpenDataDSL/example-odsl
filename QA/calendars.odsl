print "**************************************************************"
print "*********************** Calendar Test ************************"
print "**************************************************************"

use test

eombus = ExpiryCalendar(BusinessCalendar())
eombus.addRule("go to the end of the previous month")
ondate = CurveDate(Date("2020-05-10"), eombus)

tenor = Contract(ondate, "2020M06", 10)
assertEquals("M01", tenor.relative)
assertEquals("2020-06-01", tenor.start)
assertEquals("2020-06-30", tenor.end)
assertEquals("2020-05-31", tenor.expiry)
tenor = Contract(ondate, "M01", 10)
assertEquals("2020M06", tenor.absolute)
 
loadCalendars()
calendars = find ${calendar}
eng = ${calendar:"#HENG"}

assertTrue(eng, "Calendar shouldn't be null")
assertTrue(eng.name, "Calendar name shouldn't be null")

start = Date("2020-05-20")
enddate = Date("2020-05-26")

dates = eng.getDates(start, enddate)
assertEquals(4, dates.size())
assertEquals([Date("2020-05-20"),Date("2020-05-21"),Date("2020-05-22"),Date("2020-05-26")], dates)

dates = eng.getDatesFrom(start, 3)
assertEquals(4, dates.size())
assertEquals([Date("2020-05-20"),Date("2020-05-21"),Date("2020-05-22"),Date("2020-05-26")], dates)

assertTrue(eng.includes(Date("2020-05-22")))
assertFalse(eng.includes(Date("2020-05-25")))

assertEquals(Date("2020-05-21"), eng.next(start))
assertEquals(Date("2020-05-19"), eng.previous(start))

hcal = HolidayCalendar()
hcal.id = "HENG"
hcal.addRule("every Saturday")
hcal.addRule("every Sunday")
hcal.addRule("1st of January named 'New Years Day' on saturday shift 2 days and on sunday shift 1 day")
hcal.addRule("Good Friday")
hcal.addRule("Easter Monday")
hcal.addRule("first monday in may named 'Early May' to 2019")
hcal.addRule("8th of may named 'VE Day' from 2020 to 2020")
hcal.addRule("first monday in may named 'Early May' from 2021")
hcal.addRule("last monday in may named 'Spring Bank Holiday'")
hcal.addRule("last monday in august named 'Summer Bank Holiday'")
hcal.addRule("25th of december named 'Christmas Day' on saturday shift 3 days and on sunday shift 2 days")
hcal.addRule("26th of december named 'Boxing Day' on saturday shift 2 days and on sunday shift 1 day")
print hcal

assertFalse(hcal.includes(Date("2020-01-01")))
assertFalse(hcal.includes(Date("2020-04-10")))
assertFalse(hcal.includes(Date("2020-04-13")))
assertFalse(hcal.includes(Date("2020-05-08")))
assertFalse(hcal.includes(Date("2020-05-25")))
assertFalse(hcal.includes(Date("2020-08-31")))
assertFalse(hcal.includes(Date("2020-12-25")))
assertFalse(hcal.includes(Date("2020-12-28")))
assertFalse(hcal.includes(Date("2021-01-01")))
assertFalse(hcal.includes(Date("2021-04-02")))
assertFalse(hcal.includes(Date("2021-04-05")))
assertFalse(hcal.includes(Date("2021-05-03")))

// ODSL-47
HUSA = HolidayCalendar()
HUSA.addRule("Every Saturday")
HUSA.addRule("Every Sunday")
HUSA.addRule("4th of July named 'Independence Day' on Saturday shift -1 days and on Sunday shift 1 day")
assertFalse(HUSA.includes(Date("2021-07-05")))

// Intraday
hourly = IntradayCalendar(1h)
hs = Date("2020-05-20T03:00:00")
he = Date("2020-05-20T08:00:00")
indexes = hourly.getDates(hs, he)
assertEquals(6, indexes.size())

hh = IntradayCalendar(30m)
hs = Date("2020-05-20T03:00:00")
he = Date("2020-05-20T08:00:00")
indexes = hh.getDates(hs, he)
assertEquals(11, indexes.size())

// Hourly Peak calendar
peak = IntradayCalendar(1h, hcal, [0,1,2,3,4,5,6,20,21,22,23])
print peak
hs = Date("2020-05-20T00:00:00")
he = Date("2020-05-20T23:00:00")
indexes = peak.getDates(hs, he)
assertEquals(13, indexes.size())

// Test peak hours over bank holiday weekend
hs = Date("2020-05-22T00:00:00")
he = Date("2020-05-26T23:00:00")
indexes = peak.getDates(hs, he)
assertEquals(26, indexes.size())

// Test Expiry Calendars
expiry = ExpiryCalendar(${calendar:"#HENG"})
expiry.id = "ExampleExpiry"
expiry.addRule("go back 1 day using calendar before 2021-01-01")
expiry.addRule("go back 2 days using calendar after 2021-01-01")
expiry.addRule("go back 3 days using calendar for quarters")
ondate = CurveDate(Date("2020-05-10"), expiry)
exp = ondate.getExpiry("2020M06")
assertEquals(Date("2020-05-29"), exp)
exp = ondate.getExpiry("2020Q03")
assertEquals(Date("2020-06-26"), exp)

// Test saving calendars
save ${calendar:hcal}
calcount = find ${calendar}
print calcount + " Calendars"

// Save expiry calendar
save ${calendar:expiry}

dbexp = ${calendar:"ExampleExpiry"}
print dbexp.id

// Low Sulpur Gasoil
// https://www.theice.com/products/34361119/Low-Sulphur-Gasoil-Futures/expiry
rgasoil = ExpiryCalendar(BusinessCalendar())
rgasoil.addRule("go to the 14th of the current month then align forwards then go back 2 days using calendar")
ondate = CurveDate(Date("2020-02-10"), rgasoil)
assertEquals("2021-02-11", ondate.getExpiry("2021M02"))
assertEquals("2021-03-11", ondate.getExpiry("2021M03"))
assertEquals("2021-04-12", ondate.getExpiry("2021M04"))
assertEquals("2021-05-12", ondate.getExpiry("2021M05"))
assertEquals("2021-06-10", ondate.getExpiry("2021M06"))
assertEquals("2021-07-12", ondate.getExpiry("2021M07"))
assertEquals("2021-08-12", ondate.getExpiry("2021M08"))
assertEquals("2021-09-10", ondate.getExpiry("2021M09"))

print "**************************************************************"
print "*********************** Calendar Test Complete ***************"
print "**************************************************************"
