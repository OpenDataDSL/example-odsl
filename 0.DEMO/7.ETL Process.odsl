// Create a generic xml data loader workflow
xml_data_loader = workflow in "data-loaders"
    in url as Scalar
    in tx as Scalar
    out batch as Batch

    WF_START
        "ok" -> getxml
    end

    phase "EXTRACT" retries 4 delay 15 minutes then reschedule 30 minutes
        WF_ACTION getxml ai
            "ok" -> transformxml
            "failed" -> stopfailed
            ai.url = input.url
            result = ${action:"xml_url"}.run(ai, output)    
        end
    end

    phase "TRANSFORM"
        WF_ACTION transformxml ai
            "ok" -> sendbatch
            "failed" -> stopfailed
            ai.data = output.getxml.xml
            ai.tx = input.tx
            result = ${action:"transform_data"}.run(ai, output)
        end
    end

    phase "SEND"
        WF_ACTION sendbatch ai
            "ok" -> stopok
            "failed" -> stopfailed
            ai.batch = output.transformxml.batch
            result = ${action:"send_batch"}.run(ai, output)
        end
    end

    phase "LOAD" external
    end

    WF_EVENT stopok as "success"
        return "ok"
    end
    WF_EVENT stopfailed as "failed"
        return "failed"
    end

end
save ${workflow:private/xml_data_loader}

// Create a process to configure the workflow to load ECB FX data and run as a scheduled job
process = Process()
process.service = "ETL"
process.name = "ECB_FX_WORKFLOW"
process.description = "ETL Process for ECB_FX"
process.enabled = true
process.workflow = "xml_data_loader"
process.input.url = "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml"
process.input.tx = "ECB_FX"
process.cron = "0 17 ? * MON,TUE,WED,THU,FRI *"
print json(process)
save ${process:process}