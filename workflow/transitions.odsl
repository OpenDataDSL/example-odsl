xml_url = action in "extractors"
    // Extract XML from a HTTP URL
    in url as Scalar "The URL to read the XML from"
    out xml as Object "The XML file converted to an ODSL Object"
    exit "ok", "failed"
    
    assertType(input.url, "Scalar")
    on error ignore
    output.xml=${xml:input.url}
    if error
        print error
        return "failed"
    else
        return "ok"
    end
end

ifthen = gateway in "general"
    in exp as Scalar
    exit "true", "false"    
    result = evaluate(input.exp)
    if result == true
        return "true"
    end
    return "false"
end

print_stuff = action in "general"
    in message as Scalar    
    print input.message
end

test = workflow in "testing"
    in test as Scalar
    out result as Scalar
    exit "ok", "failed"

    WF_START
        "ok" -> if_gateway
    end
    phase "TEST" retries 2 delay 1 minute

        WF_GATEWAY if_gateway ai
            "true" -> stopok
            "false" -> getxml
            ai.exp = input.test
            result = ifthen.run(ai, output)
        end

        WF_ACTION getxml ai
            "ok" -> printstuff
            "failed" -> stopfailed
            ai.url = ""
            result = xml_url.run(ai, output)
        end

        WF_ACTION printstuff ai
            "ok" -> stopfailed
            ai.message = input.test
            result = print_stuff.run(ai, output)
        end
    end

    WF_EVENT stopok as "success"
        return "ok"
    end
    WF_EVENT stopfailed as "failed"
        return "failed"
    end
end

job_input = Object()
job_input.test = `1+2`
job_output = Object()
r = test.run(job_input, job_output)
print r

test2 = workflow in "testing"
    WF_START
        "ok" -> testwf
    end

    WF_WORKFLOW testwf ai
        "ok" -> stopok
        "failed" -> stopfailed
        ai.test = `"A" == "N"`
        result = test.run(ai, output)
    end
 
    WF_EVENT stopok as "success"
        return "ok"
    end
    WF_EVENT stopfailed as "failed"
        return "failed"
    end
end



job_input = Object()
job_output = Object()
r = test2.run(job_input, job_output)
print r

