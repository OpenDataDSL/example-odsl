print "**************************************************************"
print "*********************** Transformer Test *********************"
print "**************************************************************"

use test

print ""
print ">>> Creating Transformer"

print "> Creating tx"
tx = transform xml into #ForeignExchange as fx
    // Transform ECB daily FX rates to type #ForeignCurrency
    create with Cube
    unique id = "ECB_FX_EUR" + fx.currency
    SPOT = TimeSeries(xml.Cube.Cube.time, "BUSINESS", fx.rate)
    category = "Foreign Exchange"
    product = "ECB_FX"
    provider = "European Central Bank"
    model = "EUR" + fx.currency
    description = "European Central Bank Euro foreign exchange reference rates EUR/" + fx.currency
    base = "EUR"
    currency = fx.currency
end
save ${transformer:tx}
print "> Created tx"

print ">>> Running tests"
all = find ${transformer:""}
assertEquals(1, all.size, "Should have 1 transformer")
rtx = ${transformer:"tx"}
assertEquals(1, rtx.version.version, "tx version must be 1")

print "> Change tx"
tx = transform xml into #ForeignExchange as fx
    // Transform ECB daily FX rates to type #ForeignCurrency
    create with Cube
    unique id = "ECB_FX_EUR" + fx.currency
    SPOT = TimeSeries(xml.Cube.Cube.time, "BUSINESS", fx.rate)
    category = "Foreign Exchange"
    product = "ECB_FX"
    provider = "European Central Bank"
    model = "EUR" + fx.currency
    description = "European Central Bank Euro foreign exchange reference rates EUR/" + fx.currency
    base = "EUR"
    currency = fx.currency
    ccy = fx.currency
end
save ${transformer:tx}
print "> Changed tx"

rtx = ${transformer:"tx"}
assertEquals(2, rtx.version.version, "tx version must be 2")

print "> Tagging tx"
tag ${transformer:"tx":1} as PROD

rtx = ${transformer:"tx":PROD}
assertEquals(1, rtx.version.version, "PROD tx version must be 2")


