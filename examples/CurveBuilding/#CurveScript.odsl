/**
 * Bootstrap an input curve
 * to create a monthly arbitrage-free curve
 * @param input The input curve
 */
function bootstrap(input)
    bootstrap = bootstrapCurve(input)
end

function bootstrapAndShape(input)
    // Create an arbitrage free monthly curve from the input curve and use simple shaping
    boot = bootstrapCurve(input)
    bootstrapAndShape = shape(boot)
end

function multiplyByFactor(input, factor)
    // Multiply every tenor in the input curve by a factor
    multiplyByFactor = input * factor
end

function divideByFactor(input, factor)
    // Divide every tenor in the input curve by a factor
    divideByFactor = input / factor
end

function addPremium(input, premium)
    // Add a premium value to every tenor in the input curve
    addPremium = input + premium
end

function discount(input, discount)
    // Subtract a discount value from every tenor in the input curve
    discount = input - discount
end

function flatCurve(months, value)
    // Create a flat curve with the supplied value for the supplied number of months
    flatCurve = Curve(#ondate)
    m = Contract(#ondate, "M01", value)
    flatCurve.add(m)
    for i = 2 to months
        m = m.next()
        flatCurve.add(m)
    next
end

function interpolate(input, method)
    // Fill missing months using the supplied method - method can be BACKWARD
    interpolate = Curve(input.ondate)
    if method == "BACKWARD"
        months = input.contracts.filter("Month")
        interpolate.add(months[0])
        last = months[0].relativePeriodCode.period + 1
        for i = 1 to months.size - 1
            c = months[i]
            interpolate.add(c)

            ct = c.relativePeriodCode.period
            for p = last to ct
                cc = Contract(input.ondate, "M0" + p, c.value)
                interpolate.add(cc)
            next

            last = ct + 1
        next
    end
end

function timespread(input)
    // Create a curve with spreads created from the months in the input curve after bootstrapping
    boots = bootstrapCurve(input)
    timespread = Curve(input.ondate)
    last = boots.contracts[0]
    for i = 1 to boots.contracts.size - 1
        m = boots.contracts[i]
        value = m.value - last.value
        spread = Contract(input.ondate, last.tenor + "-" + m.tenor, value)
        timespread.add(spread)
        last = m
    next
end