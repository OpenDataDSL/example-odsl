// Argus propane half months
aphm = ExpiryCalendar(BusinessCalendar())
aphm.addRule("go to the 10th of the previous month for first halfmonth")
aphm.addRule("go to the 25th of the previous month for second halfmonth")
ondate = CurveDate(Date("2011-12-01"), aphm)
hm1 = Contract(ondate, "2012HM01", 15.5)
hm2 = Contract(ondate, "2012HM02", 15.5)
print hm1.tenor
print hm1.absolute
print hm1.start
print hm1.end
print hm1.expiry
print "======================"
print hm2.tenor
print hm2.absolute
print hm2.start
print hm2.end
print hm2.expiry
print "======================"

hm1 = Contract(ondate, "HM01", 15.5)
hm2 = Contract(ondate, "HM02", 15.5)
print hm1.tenor
print hm1.absolute
print hm1.start
print hm1.end
print hm1.expiry
print "======================"
print hm2.tenor
print hm2.absolute
print hm2.start
print hm2.end
print hm2.expiry
print "======================"


#RPXEELFBLM = ExpiryCalendar(BusinessCalendar())
#RPXEELFBLM.addRule("go to the end of the current month then go back 1 days then align backwards except if the last day of the month is a Monday then go to the end of the current month")
#ondate = CurveDate(parse("05-07-2021", "dd-MM-yyyy"), #RPXEELFBLM)
SETTLE = Curve(#ondate)
#contract = Contract(#ondate, "2021M07", 233.1)
// SETTLE.add(#contract)
print json(#contract)
print json(Contract(#ondate, "2021M08", 233.1))

test = ExpiryCalendar(BusinessCalendar())
test.addRule("go to the end of the previous month then go back 2 days using calendar then align backwards for quarters")
ondate = CurveDate(Date("2020-01-01"), test)
print ondate.getExpiry("2020Q02")
print ondate.getExpiry("2020Q03")
print ondate.getExpiry("2020Q04")
print ondate.getExpiry("2021Q01")
print ondate.getExpiry("2021Q02")
print ondate.getExpiry("2021Q03")
print ondate.getExpiry("2021Q04")


pxe = ExpiryCalendar(BusinessCalendar())
pxe.addRule("go to the end of the current month then go back 1 days then align backwards except if the last day of the month is a Monday then go to the end of the current month")
ondate = CurveDate(Date("2019-12-01"), pxe)
assertEquals("2020-01-30", Contract(ondate, "2020M01",1).expiry)
assertEquals("2020-02-28", Contract(ondate, "2020M02",1).expiry)
assertEquals("2020-03-30", Contract(ondate, "2020M03",1).expiry)
assertEquals("2020-04-29", Contract(ondate, "2020M04",1).expiry)
assertEquals("2020-05-29", Contract(ondate, "2020M05",1).expiry)
assertEquals("2020-06-29", Contract(ondate, "2020M06",1).expiry)
assertEquals("2020-07-30", Contract(ondate, "2020M07",1).expiry)
assertEquals("2020-08-31", Contract(ondate, "2020M08",1).expiry)
assertEquals("2020-09-29", Contract(ondate, "2020M09",1).expiry)
assertEquals("2020-10-30", Contract(ondate, "2020M10",1).expiry)
assertEquals("2020-11-30", Contract(ondate, "2020M11",1).expiry)
assertEquals("2020-12-30", Contract(ondate, "2020M12",1).expiry)
assertEquals("2021-01-29", Contract(ondate, "2021M01",1).expiry)
assertEquals("2021-02-26", Contract(ondate, "2021M02",1).expiry)
assertEquals("2021-03-30", Contract(ondate, "2021M03",1).expiry)
assertEquals("2021-04-29", Contract(ondate, "2021M04",1).expiry)
assertEquals("2021-05-31", Contract(ondate, "2021M05",1).expiry)
assertEquals("2021-06-29", Contract(ondate, "2021M06",1).expiry)
assertEquals("2021-07-30", Contract(ondate, "2021M07",1).expiry)
assertEquals("2021-08-30", Contract(ondate, "2021M08",1).expiry)
assertEquals("2021-09-29", Contract(ondate, "2021M09",1).expiry)
assertEquals("2021-10-29", Contract(ondate, "2021M10",1).expiry)
assertEquals("2021-11-29", Contract(ondate, "2021M11",1).expiry)
assertEquals("2021-12-30", Contract(ondate, "2021M12",1).expiry)

ondate = CurveDate(Date("2021-07-01"), pxe)
c = Contract(ondate, "2021D0702", 1)
assertEquals("D01", c.tenor)
print c


// eombus = ExpiryCalendar(BusinessCalendar())
// eombus.addRule("go to the end of the previous month")
// save ${expiry:eombus}

// ondate = CurveDate(Date("2020-05-10"), eombus)
// expiry = ondate.getExpiry("2020M06")
// print expiry

// // Financial expiry calendar
// fineng = FinancialExpiryCalendar("FINHENG", "#HENG", "#HENG", "#HENG", 0)
// print json(fineng)
