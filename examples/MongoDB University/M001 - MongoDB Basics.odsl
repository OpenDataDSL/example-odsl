//#region logout
logout
//#endregion

//#region Chapter 2 find command
// db.zips.find({"state": "NY"})
// db.zips.find({"state": "NY"}).count()
zips = find ${object:"sample_training.zips"} where state="NY"
print zips.size

// db.zips.find({"state": "NY", "city": "ALBANY"})
// db.zips.find({"state": "NY", "city": "ALBANY"}).pretty()
zips = find ${object:"sample_training.zips"} where state="NY" and city="ALBANY"
print zips

//#endregion

//#region Chapter 2 Query Operators

// Find all documents where the tripduration was less than or equal to 70 seconds and the usertype was not Subscriber:
// db.trips.find({"tripduration":{"$lte":70},"usertype":{"$ne":"Subscriber"}}).pretty()
short_trips = find ${object:"sample_training.trips"} where tripduration<=70 and usertype != "Subscriber"
print short_trips

// Find all documents where the tripduration was less than or equal to 70 seconds and the usertype was Customer using a redundant equality operator:
// db.trips.find({"tripduration":{"$lte":70},"usertype":{"$eq":"Customer"}}).pretty()
short_trips = find ${object:"sample_training.trips"} where tripduration<=70 and usertype = "Customer"
print short_trips

// Find all documents where the tripduration was less than or equal to 70 seconds and the usertype was Customer using the implicit equality operator:
// db.trips.find({"tripduration":{"$lte":70},"usertype":"Customer"}).pretty()
short_trips = find ${object:"sample_training.trips"} where tripduration<=70 and usertype = "Customer"
print short_trips

//#endregion

//#region Chapter 4 Comparison operators

// How many documents in the sample_training.zips collection have fewer than 1000 people listed in the pop field?
// 8065
zips = find ${object:"sample_training.zips"} where pop<1000
print zips.size

// What is the difference between the number of people born in 1998 and the number of people born after 1998 in the sample_training.trips collection?
// 6
in1998 = find ${object:"sample_training.trips"} where "birth year" = 1998
after = find ${object:"sample_training.trips"} where "birth year" > 1998
print after.size - in1998.size
//#endregion

//#region Chapter 4 Logic Operators

// Find all documents where airplanes CR2 or A81 left or landed in the KZN airport:
// db.routes.find({"$and":[{"$or":[{"dst_airport":"KZN"},{"src_airport":"KZN"}]},{"$or":[{"airplane":"CR2"},{"airplane":"A81"}]}]}).pretty()
// 18
routes = find ${object:"sample_training.routes"} where (dst_airport="KZN" or src_airport="KZN") and (airplane="CR2" or airplane="A81")
print routes.size

// How many businesses in the sample_training.inspections dataset have the inspection result "Out of Business" and belong to the "Home Improvement Contractor - 100" sector?
// 4
businesses = find ${object:"sample_training.inspections"} where result="Out of Business" and sector="Home Improvement Contractor - 100"
print businesses.size

// How many zips in the sample_training.zips dataset are neither over-populated nor under-populated?
// In this case, we consider population of more than 1,000,000 to be over- populated and less than 5,000 to be under-populated.
// 11193
zips = find ${object:"sample_training.zips"} where pop<=1000000 and pop>=5000
print zips.size

// How many companies in the sample_training.companies dataset were
// either founded in 2004
// 		○ [and] either have the social category_code [or] web category_code,
// [or] were founded in the month of October
// 		○ [and] also either have the social category_code [or] web category_code?

// 149
companies = find ${object:"sample_training.companies"} where (founded_year=2004 and (category_code="social" or category_code="web")) or (founded_month=10 and (category_code="social" or category_code="web"))
print companies.size
//#endregion

//#region Chapter 4 Expressive Operator
// Find all documents where the trip started and ended at the same station:
// db.trips.find({"$expr":{"$eq":["$end station id","$start station id"]}}).count()
// 316
trips = find ${object:"sample_training.trips"} where "$start station id"="$end station id"
print trips.size

// Find all documents where the trip lasted longer than 1200 seconds, and started and ended at the same station:
// db.trips.find({"$expr":{"$and":[{"$gt":["$tripduration",1200]},{"$eq":["$end station id","$start station id"]}]}}).count()
// 173
trips = find ${object:"sample_training.trips"} where "$start station id"="$end station id" and tripduration>1200
print trips.size

// How many companies in the sample_training.companies collection have the same permalink as their twitter_username?
// 1299
companies = find ${object:"sample_training.companies"} where "$permalink"="$twitter_username"
print companies.size

//#endregion

//#region Chapter 4 Array Operators
// Find all documents with exactly 20 amenities which include all the amenities listed in the query array:
// db.listingsAndReviews.find({"amenities":{"$size":20,"$all":["Internet","Wifi","Kitchen","Heating","Family/kid friendly","Washer","Dryer","Essentials","Shampoo","Hangers","Hair dryer","Iron","Laptop friendly workspace"]}}).pretty()
listings = find top 1 ${object:"sample_airbnb.listingsAndReviews"} where amenities=size(20) and amenities=all("Internet","Wifi","Kitchen","Heating","Family/kid friendly","Washer","Dryer","Essentials","Shampoo","Hangers","Hair dryer","Iron","Laptop friendly workspace")
print listings

// What is the name of the listing in the sample_airbnb.listingsAndReviews dataset that accommodates more than 6 people and has exactly 50 reviews?
// Sunset Beach Lodge Retreat
listings = find ${object:"sample_airbnb.listingsAndReviews"} where accommodates>6 and reviews=size(50)
print listings.name

// Using the sample_airbnb.listingsAndReviews collection find out how many documents have the "property_type" "House", and include "Changing table" as one of the "amenities"?
// 11
listings = find ${object:"sample_airbnb.listingsAndReviews"} where property_type="House" and amenities="Changing table"
print listings.size
//#endregion

//#region Chapter 4 Array Operators and Project

// Find all documents with exactly 20 amenities which include all the amenities listed in the query array, and display their price and address:
// db.listingsAndReviews.find({"amenities":{"$size":20,"$all":["Internet","Wifi","Kitchen","Heating","Family/kid friendly","Washer","Dryer","Essentials","Shampoo","Hangers","Hair dryer","Iron","Laptop friendly workspace"]}},{"price":1,"address":1}).pretty()
listings = find ${object:"sample_airbnb.listingsAndReviews"} where amenities=size(20) and amenities=all("Internet","Wifi","Kitchen","Heating","Family/kid friendly","Washer","Dryer","Essentials","Shampoo","Hangers","Hair dryer","Iron","Laptop friendly workspace") project price,address
print listings

// Find all documents that have Wifi as one of the amenities only include price and address in the resulting cursor:
// db.listingsAndReviews.find({"amenities":"Wifi"},{"price":1,"address":1,"_id":0}).pretty()
listings = find ${object:"sample_airbnb.listingsAndReviews"} where amenities="Wifi" project price,address
print listings

// Find all documents where the student in class 431 received a grade higher than 85 for any type of assignment:
// db.grades.find({"class_id":431},{"scores":{"$elemMatch":{"score":{"$gt":85}}}}).pretty()
grades = find ${object:"sample_training.grades"} where class_id=431 project scores where score>85
print grades

// Find all documents where the student had an extra credit score:
// db.grades.find({"scores":{"$elemMatch":{"type":"extra credit"}}}).pretty()
// Haven't got any grades with extra credit, so use quiz and project only the quiz scores
grades = find ${object:"sample_training.grades"} where scores=elemMatch(`{type:"quiz"}`) project scores where type="quiz"
print grades

// How many companies in the sample_training.companies collection have offices in the city of Seattle?
// 117
companies = find ${object:"sample_training.companies"} where offices.city="Seattle"
print companies.size

//#endregion

//#region Chapter 4 Array Operators and Sub Documents
// db.trips.findOne({ "start station location.type": "Point" })
trips = find top 1 ${object:"sample_training.trips"} where "start station location.type"="Point"
print trips

// db.companies.find({ "relationships.0.person.last_name": "Zuckerberg" }, { "name": 1 }).pretty() 
people = find ${object:"sample_training.companies"} where "relationships.0.person.last_name"="Zuckerberg" project name
print people

// db.companies.find({ "relationships.0.person.first_name": "Mark", "relationships.0.title": { "$regex": "CEO" } }, { "name": 1 }).count() 
// db.companies.find({ "relationships.0.person.first_name": "Mark", "relationships.0.title": {"$regex": "CEO" } }, { "name": 1 }).pretty() 
people = find ${object:"sample_training.companies"} where "relationships.0.person.first_name"="Mark" and "relationships.0.title"=regex("CEO") project name
print people.size
print people

// db.companies.find({ "relationships": { "$elemMatch": { "is_past": true, "person.first_name": "Mark" } } }, { "name": 1 }).pretty() 
// db.companies.find({ "relationships": { "$elemMatch": { "is_past": true, "person.first_name": "Mark" } } }, { "name": 1 }).count()
people = find ${object:"sample_training.companies"} where relationships=elemMatch(`{"is_past":true,"person.first_name":"Mark"}`) project name
print people.size
print people

// How many trips in the sample_training.trips collection started at stations that are to the west of the -74 longitude coordinate?
// Longitude decreases in value as you move west.
// Note: We always list the longitude first and then latitude in the coordinate pairs; i.e.
// <field_name>: [ <longitude>, <latitude> ]
// 1928
trips = find ${object:"sample_training.trips"} where "start station location.coordinates.0"<-74
print trips.size

// How many inspections from the sample_training.inspections collection were conducted in the city of NEW YORK?
// 18279
inspections = find ${object:"sample_training.inspections"} where address.city="NEW YORK"
print inspections.size

//#endregion

//#region Chapter 5 Aggregation

// Find all documents that have Wifi as one of the amenities. Only include price and address in the resulting cursor.
// db.listingsAndReviews.find({"amenities":"Wifi"},{"price":1,"address":1,"_id":0}).pretty()
listings = find ${object:"sample_airbnb.listingsAndReviews"} where amenities="Wifi" project price, address, !_id
print listings

// Using the aggregation framework find all documents that have Wifi as one of the amenities``*. Only include* ``price and address in the resulting cursor.
// db.listingsAndReviews.aggregate([{"$match":{"amenities":"Wifi"}},{"$project":{"price":1,"address":1,"_id":0}}]).pretty()
listings = aggregate ${object:"sample_airbnb.listingsAndReviews"}
    match amenities="Wifi"
    project price, address, !_id
end
print listings

// Find one document in the collection and only include the address field in the resulting cursor.
// db.listingsAndReviews.findOne({},{"address":1,"_id":0})
listings = find top 1 ${object:"sample_airbnb.listingsAndReviews"} project address, !_id
print listings


// Project only the address field value for each document, then group all documents into one document per address.country value.
// db.listingsAndReviews.aggregate([{"$project":{"address":1,"_id":0}},{"$group":{"_id":"$address.country"}}])
listings = aggregate ${object:"sample_airbnb.listingsAndReviews"}
    project address, !_id
    group _id="$address.country"
end
print listings

// Project only the address field value for each document, then group all documents into one document per address.country value, and count one for each document in each group.
// db.listingsAndReviews.aggregate([{"$project":{"address":1,"_id":0}},{"$group":{"_id":"$address.country","count":{"$sum":1}}}])
listings = aggregate ${object:"sample_airbnb.listingsAndReviews"}
    project address, !_id
    group _id="$address.country", count=sum(1)
end
print listings

// What room types are present in the sample_airbnb.listingsAndReviews collection?
// Entire home/apt
// Shared room
// Private room
room_types = find unique room_type from ${object:"sample_airbnb.listingsAndReviews"}
print room_types

//#endregion


//#region Chapter 5 Sort and Limit
// db.zips.find().sort({ "pop": 1 }).limit(1) 
zips = find top 1 ${object:"sample_training.zips"} order by pop asc
print zips

// db.zips.find({ "pop": 0 }).count() 
zips = find ${object:"sample_training.zips"} where pop=0 order by pop asc
print zips.size

// db.zips.find().sort({ "pop": -1 }).limit(1) 
zips = find top 1 ${object:"sample_training.zips"} order by pop desc
print zips

// db.zips.find().sort({ "pop": -1 }).limit(10) 
zips = find top 10 ${object:"sample_training.zips"} order by pop desc
print zips

// db.zips.find().sort({ "pop": 1, "city": -1 })
zips = find top 10 ${object:"sample_training.zips"} order by pop asc, city desc
print zips

// In what year was the youngest bike rider from the sample_training.trips collection born?
// 1999
youngest = find top 1 ${object:"sample_training.trips"} where "birth year" != "" order by "birth year" desc
print youngest[0]["birth year"]
//#endregion


//#region Chapter 5 Indexes
// db.trips.find({ "birth year": 1989 }) 
trips = find ${object:"sample_training.trips"} where "birth year" == 1989
print trips

// db.trips.find({ "start station id": 476 }).sort( { "birth year": 1 } ) 
trips = find ${object:"sample_training.trips"} where "start station id" == 476 order by "birth year" asc
print trips

// db.trips.createIndex({ "birth year": 1 }) 

// db.trips.createIndex({ "start station id": 1, "birth year": 1 })

//#endregion

//#region Chapter 5 Upsert
// db.iot.updateOne({ "sensor": r.sensor, "date": r.date, "valcount": { "$lt": 48 } }, { "$push": { "readings": { "v": r.value, "t": r.time } }, "$inc": { "valcount": 1, "total": r.value } }, { "upsert": true })

//#endregion





