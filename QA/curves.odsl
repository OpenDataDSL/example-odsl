print "**************************************************************"
print "*********************** Curve Test ***************************"
print "**************************************************************"

set precision 2

expiry = ExpiryCalendar(BusinessCalendar())
expiry.addRule("go back 1 day using calendar")

ondate = CurveDate(Date("2020-12-01"), expiry)
c1 = Curve(ondate)

c1.add(Contract(ondate, "2021M01", 12.5))
c1.add(Contract(ondate, "2021M02", 12.75))
c1.add(Contract(ondate, "2021M03", 13.0))
c1.add(Contract(ondate, "2021M04", 13.5))
c1.add(Contract(ondate, "2021Q01", 12.75))
c1.add(Contract(ondate, "2021Q02", 13.25))
c1.add(Contract(ondate, "2021Q03", 13.75))
c1.add(Contract(ondate, "2021Y", 13.5))
c1.add(Contract(ondate, "2022Y", 14))

c2 = Curve(ondate)

c2.add(Contract(ondate, "2021M01", 0.1))
c2.add(Contract(ondate, "2021M02", 0.22))
c2.add(Contract(ondate, "2021M03", 0.1))
c2.add(Contract(ondate, "2021M04", 0.11))
c2.add(Contract(ondate, "2021M05", 0.13))
c2.add(Contract(ondate, "2021M06", 0.16))
c2.add(Contract(ondate, "2021M07", 0.2))
c2.add(Contract(ondate, "2021M08", 0.15))
c2.add(Contract(ondate, "2021M09", 0.05))
c2.add(Contract(ondate, "2021M10", -0.15))
c2.add(Contract(ondate, "2021M11", 0.0))
c2.add(Contract(ondate, "2021M12", 0.15))

print "Testing Curve Operations"
c3 = c1 + c2
assertEquals(12.6, c3["2021M01"].value)
c4 = c1 + 2
assertEquals(14.5, c4["2021M01"].value)
c5 = c2 + 2
assertEquals(2.1, c5["2021M01"].value)

print "Testing curve Functions"
c6 = bootstrapCurve(c1)
print c6.contracts
// print json(c6)
assertEquals(12.5, c6.contracts.M01.value)
assertEquals(12.75, c6.contracts.M02.value)
assertEquals(13.0, c6.contracts.M03.value)
assertEquals(13.5, c6.contracts.M04.value)
assertEquals(13.13, c6.contracts.M05.value)
assertEquals(13.13, c6.contracts.M06.value)
assertEquals(13.75, c6.contracts.M07.value)
assertEquals(13.75, c6.contracts.M08.value)
assertEquals(13.75, c6.contracts.M09.value)
assertEquals(14.25, c6.contracts.M10.value)
assertEquals(14.25, c6.contracts.M11.value)
assertEquals(14.25, c6.contracts.M12.value)
print c6.created

assertEquals(24, c6.size())
c7 = c6 + c2
assertEquals(24, c7.size())

print "Testing short tenors"

c1.add(Contract(ondate, "D01", 12.5))
c1.add(Contract(ondate, "D02", 12.6))
c1.add(Contract(ondate, "WKD01", 12.7))
c1.add(Contract(ondate, "WW01", 12.8))
c1.add(Contract(ondate, "W01", 12.7))
c1.add(Contract(ondate, "W02", 12.6))
// c1.add(Contract(ondate, "BOM", 12.5))

print json(c1)

print "Curve Test Complete"