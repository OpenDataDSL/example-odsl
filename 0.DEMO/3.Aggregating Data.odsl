//#region Simple example
aggregate ${object:"m101:sample_training.zips"}
    match state = "NY" and city = "ALBANY"        
end
//#endregion

//#region Match and count
aggregate ${object:"m101:sample_training.zips"}
    match state = "NY" and city = "ALBANY" and pop > 5000
    count "zips"
end
//#endregion

//#region Test
aggregate ${object:"m101:sample_training.companies"}
    match founded_year>1980 and number_of_employees != null
    bucket "$founded_year" boundaries [1980, 1990, 2000, 2010] default "other"
end
//#endregion

//#region 
// Help MongoDB pick a movie our next movie night! Based on employee polling, we've decided that potential movies must meet the following criteria.

// imdb.rating is at least 7
// genres does not contain "Crime" or "Horror"
// rated is either "PG" or "G"
// languages contains "English" and "Japanese"

aggregate ${object:"m121:aggregations.movies"}
    match "imdb.rating" >= 7 and genres nin ["Crime","Horror"] and rated in ["PG","G"] and languages=all("English","Japanese")
    count "movies"
end
//#endregion

//#region addFields
aggregate ${object:"m121:aggregations.solarSystem"}
    addFields gravity="$gravity.value", mass="$mass.value", radius="$radius.value", sma="$sma.value"
end
//#endregion

//#region group
aggregate ${object:"m121:aggregations.movies"}
    group _id="$year", num=sum(1)
    sort num desc
    match num>500
end
//#endregion

//#region Using geoNear
mongodb = Point([73.98769,40.75734])
aggregate ${object:"m121:aggregations.nycFacilities"}
    geoNear near=mongodb, distanceField="distanceFromMongoDB", spherical=true, query={"type":"Hospital"}
    project name, distanceFromMongoDB
    sort distanceFromMongoDB asc
    limit 3
end
//#endregion

//#region Lookup
aggregate ${object:"m121:aggregations.air_alliances"}
    lookup from "air_airlines" localField "airlines" foreignField "name" as "airlines"
end
//#endregion

//#region manual buckets
aggregate ${object:"m101:sample_training.companies"}
    match founded_year > 1980 and number_of_employees != null
    bucket "$number_of_employees" boundaries [ 0, 20, 50, 100, 500, 1000, Infinity ] 
end
//#endregion

//#region 
aggregate ${object}
    { "$collStats": { "storageStats": { } } }
end
//#endregion

//#region A complex example
destinations=aggregate ${object:"m121:aggregations.air_alliances"}
    match name="OneWorld"
    graphLookup from air_airlines startWith "$airlines" connectFromField name connectToField name as airlines maxDepth 0 restrictSearchWithMatch country in ["Germany","Spain","Canada"]
    graphLookup from air_routes startWith "$airlines.base" connectFromField dst_airport connectToField src_airport as connections maxDepth 1
    project validAirlines="$airlines.name", "connections.dst_airport","connections.airline.name"
    unwind "$connections"
    project isValid=in("$connections.airline.name","$validAirlines"),"connections.dst_airport"
    match isValid=true
    group _id="$connections.dst_airport"
end
print destinations
//#endregion

//#region Multiple Facets
aggregate ${object:"m121:aggregations.movies"}
    match metacritic>=0 and "imdb.rating" >= 0
    project !_id, metacritic, imdb, title
    facet top_metacritic 
            sort metacritic desc, title asc
            limit 10
            project title
        ,top_imdb
            sort "imdb.rating" desc, title asc
            limit 10
            project title
    end
    project movies_in_both=setIntersection("$top_metacritic", "$top_imdb")
end
//#endregion

//#region Documents
aggregate ${object}
    documents [{x:10}, {x:2}, {x:5}]
    bucketAuto "$x" buckets 4 
end

//#endregion
