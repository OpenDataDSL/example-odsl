ECB_FX = transform xml into #ForeignExchange as fx
    create with Cube
    unique id = "ECB_FX_EUR" + fx.currency
    SPOT = TimeSeries(xml.Cube.Cube.time, "BUSINESS", fx.rate)
    category = "Foreign Exchange"
    product = "ECB_FX"
    provider = "European Central Bank"

    model = "EUR" + fx.currency
    description = "European Central Bank Euro foreign exchange reference rates EUR/" + fx.currency
    base = "EUR"
    currency = fx.currency
end

xml_url = action in "extractors"
    // Extract XML from a HTTP URL
    in url as Scalar "The URL to read the XML from"
    out xml as Object "The XML file converted to an ODSL Object"
    exit "ok", "failed"
    
    assertType(input.url, "Scalar")
    //on error ignore
    output.xml=${xml:input.url}
    if error
        print error
        return "failed"
    else
        return "ok"
    end
end

transform_data = action in "transformers"
    // Transform data using a transformer
    in data as Object "The data to transform"
    in tx as Transformer "The transformer to use"
    out batch as Batch "The batch of created models"
    
    PROCESS.service="ETL"
    PROCESS.name="ECB_FX"
    batch=PROCESS.createBatch()
    models = input.tx.run(input.data)
    batch.addAll(models)
    output.batch = batch
end

send_batch = action in "loaders"
    // Send a batch of data to the server to be updated
    in batch as Object "The batch to upload"
    send input.batch
end

xml_data_loader = workflow in "data-loaders"
    // Extract, transform and load data to the HUB
    in url as Scalar
    in tx as Transformer
    out batch as Batch

    WF_START
        "ok" -> getxml
    end

    phase "EXTRACT" retries 1 delay 10 seconds then reschedule 1 hour
        WF_ACTION getxml ai
            "ok" -> transformxml
            "failed" -> stopfailed
            ai.url = input.url
            result = xml_url.run(ai, output)
        end
    end

    phase "TRANSFORM"
        WF_ACTION transformxml ai
            "ok" -> sendbatch
            "failed" -> stopfailed
            ai.data = output.xml_url.xml
            ai.tx = input.tx
            result = transform_data.run(ai, output)
        end
    end

    phase "SEND"
        WF_ACTION sendbatch ai
            "ok" -> stopok
            "failed" -> stopfailed
            ai.batch = output.transform_data.batch
            result = send_batch.run(ai, output)
        end
    end

    WF_EVENT stopok as "success"
        return "ok"
    end
    WF_EVENT stopfailed as "failed"
        return "failed"
    end
end

job_input = Object()
job_input.url = "https://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml"
job_input.tx = ECB_FX
job_output = Object()
xml_data_loader.run(job_input, job_output)
print json(job_output.xml_data_loader.transform_data.batch)
