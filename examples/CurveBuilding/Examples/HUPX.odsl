#HUPX = ExpiryCalendar(DailyCalendar())
#HUPX.addRule("go back 2 days")
ondate = CurveDate(Date("2021-07-01"), #HUPX)

input = Curve(ondate)
input.add(Contract(ondate, "2021D0701", 94.4))
input.add(Contract(ondate, "2021D0702", 101.6))
input.add(Contract(ondate, "2021W26", 100.8))
input.add(Contract(ondate, "2021W27", 107.67))
input.add(Contract(ondate, "2021W28", 106.72))
input.add(Contract(ondate, "2021W29", 84.99))
input.add(Contract(ondate, "2021W30", 99.6))
input.add(Contract(ondate, "2021M07", 95.04))
input.add(Contract(ondate, "2021M08", 101.63))
input.add(Contract(ondate, "2021M09", 101.98))
input.add(Contract(ondate, "2021M10", 100.05))
input.add(Contract(ondate, "2021Q04", 100.62))
input.add(Contract(ondate, "2022Q01", 96.63))
input.add(Contract(ondate, "2022Q02", 69.46))
input.add(Contract(ondate, "2022Q03", 77.5))
input.add(Contract(ondate, "2022Y", 79.59))
input.add(Contract(ondate, "2023Y", 68.13))
input.add(Contract(ondate, "2024Y", 64.21))

// Generic bootstrap
curve = bootstrapCurve(input)
// Remove the M00
curve.remove("M00")
// Generate the in-month
inmonth = bootstrapInmonth(ondate, input)
// Add together
curve.add(inmonth.contracts)

print curve.contracts

function bootstrapInmonth(ondate, input)
    bootstrapInmonth = Curve(ondate)
    weeks = input.contracts.filter("Week")
    for w in weeks
        wdays = asDays(w)
        for d in wdays
            if d.start >= ondate
                bootstrapInmonth.add(d)
            end
        next
    next
    days = input.contracts.filter("Day")
    bootstrapInmonth.add(days)
end